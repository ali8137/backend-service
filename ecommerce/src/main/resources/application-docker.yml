#this is the docker version of the application.yml file

server:
  port: 8088

spring:
  application:
    name: ecommerce
  ## Database
  datasource:
    url: jdbc:mysql://mysql:3306/${MYSQL_DATABASE}
    username: ${MYSQL_USER}
    password: ${MYSQL_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
      #        ddl-auto: create-drop
      #        ddl-auto: none
      #        ddl-auto: create
      #      create-drop and update are not suitable for production
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    database: mysql
    database-platform: org.hibernate.dialect.MySQLDialect

## logging configuration:
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

## properties to be added/injected into the application code:
## secret info/properties:
#jwt:
#  secret: ${JWT_SECRET_KEY}
# the above environment variable was rather accessed using System.getenv("JWT_SECRET_KEY")

stripe:
  api:
    key: ${STRIPE_SECRET_KEY}
#    webhook-secret: ${STRIPE_WEBHOOK_SECRET}
# the above environment variable was rather accessed using System.getenv("STRIPE_WEBHOOK_SECRET")

## security configuration: (like OAuth2 configuration for resource server and OAuth2 client):

# TODO: Oauth2 configuration

























#this is the local machine version of the application.yml file
#
#spring:
#  application:
#    name: ecommerce
#  server:
#    port: 8088
#
############################################################################################################################
#
### Database
#  datasource:
#    url: jdbc:mysql://localhost:3306/ecommerce
#    username: root
#    password: password1
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    jpa:
#      hibernate:
#        ddl-auto: create-drop
#        #        or
#        #        ddl-auto: update
#        #        or
#        #        ddl-auto: none
#        #        or
#        #        ddl-auto: create
#      show-sql: true
#      #    the above is to tell spring to show the SQL generated by Hibernate
#      properties:
#        hibernate:
#          format_sql: true
#      database: mysql
#      #    the above is to tell the type of the database that we have or that we're connecting to
#      database-platform: org.hibernate.dialect.MySQLDialect
#      #    the above is to direct spring to generate/write better queries which are specific and suitable with PostgreSQL database
#
##  #  or for postgres:
##    datasource:
##      url: jdbc:postgresql://localhost:5432/databaseName1
##      username: postgres
##      password: password1
##      driver-class-name: org.postgresql.Driver
##      jpa:
##        hibernate:
##          ddl-auto: create-drop
##          #        or
##          #        ddl-auto: update
##          #        or
##          #        ddl-auto: none
##          #        or
##          #        ddl-auto: create
##        show-sql: true
##        #    the above is to tell spring to show the SQL generated by Hibernate
##        properties:
##          hibernate:
##            format_sql: true
##        database: postgresql
##        #    the above is to tell the type of the database that we have or that we're connecting to
##        database-platform: org.hibernate.dialect.PostgreSQLDialect
##        #    the above is to direct spring to generate/write better queries which are specific and suitable with PostgreSQL database
##
##  #  or for mongodb:
##    data:
##      mongodb:
##        username: username1
##        password: password1
##        host: localhost
##        port: 27017
##        database: databaseName1
##        #      above is the name of the database that we will create later in this project
##        #      all the above 5 properties are the same as the below property:
##        #      spring.data.mongodb.uri: mongodb://alibou:alibou@localhost:27017/chat_app
##        authentication-database: admin
##  #      mongodb supports automatic creation of the database and the collections when any data is inserted into the database as a result of project actions/operations/functionalities.
##
##
##  # or for H2 database:
##  h2:
##    console:
##      enabled: true
##    datasource:
##      url: jdbc:h2:mem:test
##  jpa:
##    show-sql: true
##    hibernate:
##      ddl-auto: create-drop
##      #      or
##      #      ddl-auto: update
##      #      or
##      #      ddl-auto: none
##      #      or
##      #      ddl-auto: create
#
#
############################################################################################################################
#
### properties to be added/injected into the application code:
#
#
############################################################################################################################
#
### microservices configuration:
#
#  ## eureka:
#  ## zipkin:
#  ## config server:
#  ## gateway:
#  ## resilience4j:
#  ## rabbitmq:
#  ## or
#  ## kafka:
#
############################################################################################################################
#
### logging configuration:
#
############################################################################################################################
#
### security configuration: (like OAuth2 configuration for resource server and OAuth2 client):
#
############################################################################################################################
#
### CORS configuration in case you want to configure it from this file:
##  web:
##    cors:
##      allowed-origins: http://localhost:3000
##      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
##      allowed-headers: "*"
##      allow-credentials: true
##      max-age: 3600
#
############################################################################################################################
